import os
from os import listdir, rename
import socket
import pathlib
from os.path import isfile, join
from datetime import datetime
import zipfile
import shutil

class malwareArchiver:
    filesToProcess=[]
    def __init__(self, config):
        print ("Malware Archiver Created..")
        print (config)
        self.config=config
        self.archiveData()
        # print (self.filesToProcess)
        self.processNewMalware()


    # def getFilenames(self):
    #     print (self.config)
    #     for folder in self.config['malwareSubFolders']:
    #         mypath=self.config['rootFolder']+folder
    #         onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]
    #         for item in onlyfiles:
    #             filenameString=mypath+"/"+item
    #             if filenameString.endswith(".tgz") or filenameString.endswith(".DS_Store"):
    #                 continue
    #             else:
    #                 self.filesToProcess.append(mypath+"/"+item)

    def getFilenames(self, folderWithFiles):
        fileList=[]
        mypath=folderWithFiles
        onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]
        for item in onlyfiles:
            fileList.append(mypath+"/"+item)
        return fileList.copy()

    def processNewMalware(self):
        for folder in self.config['malwareSubFolders']:
            mypath = self.config['rootFolder'] + folder

            files=self.getFilenames(mypath)
            for file in files:
                creationDate=self.getMeta(file)
                self.renameFile(file, creationDate)

    def getMeta(self, file):
        fname = pathlib.Path(file)
        assert fname.exists(), f'No such file: {fname}'  # check that the file exists
        mtime = datetime.fromtimestamp(fname.stat().st_mtime)
        mtime=str(mtime)
        mtime=mtime.replace(" ","-")
        return mtime

    def renameFile(self, file, creationDate):
        hostname=socket.gethostname()
        newFileName=file
        newFileName=newFileName.replace(self.config['rootFolder'],"")
        newFileName=file.replace("/","_")
        newFileName = newFileName[1:]
        newFileName=self.config['completeFolder']+"/"+hostname+"-"+newFileName+"_"+creationDate+".tgz"
        print (newFileName)
        rename(file, newFileName)

    def archiveData(self):
        mypath=self.config['completeFolder']
        print ("::", mypath)
        onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]
        for item in onlyfiles:
            filenameWithPath=self.config['completeFolder']+"/"+item
            newFileName=filenameWithPath.replace(self.config['completeFolder'], self.config['archiveFolder'])
            rename(filenameWithPath, newFileName)
        filesToArchive=self.getFilenames(self.config['archiveFolder'])

        # currentMonth = datetime.now().month
        currentDate = datetime.now()
        currentMonth=currentDate.strftime("%B")
        currentYear = datetime.now().year

        archiveName=self.config['archiveFolder']+"/"+str(currentYear)+"-"+str(currentMonth)+"-MalwareArchive"+".zip"
        # print ("# of files to archive:", len(filesToArchive))
        zip = zipfile.ZipFile(archiveName, 'a')
        for file in filesToArchive:
            if file.endswith(".zip") or file.endswith(".DS_Store"):
                print ("     - Skip:", file)
                continue
            else:
                print ("     - Zipping File:", file)
                zip.write(file)
                os.remove(file)
        zip.close()