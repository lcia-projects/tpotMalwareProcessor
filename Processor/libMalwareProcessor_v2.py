from os import walk, path
import os
import tarfile
import hashlib
import requests
import time
import virustotal3.core
import json
import vt
import shutil
import pathlib
from os.path import isfile, join
from datetime import datetime
import sys
from libCythreal import queryCytheral
import time
# todo: move files that are skipped to a "not-processed" folder
# todo: check for folders in yaml, if folder not found, create them.
# todo: errorcheck for virustotal3.errors.VirusTotalApiError: "message" quota exceeded" "code":QuotaExceededError
# todo: put some kind of output for cythreal queries to know whats going on


class malwareProcessor:
    unKnownMalwareToProcess=[]
    knownMalwareToProcess=[]
    vt_results=[]
    malwareProcessList = []
    processingResults=[]

    def __init__(self, config):
        print ("malware Object Created")
        self.config=config
        # get archive filenames
        self.ArchiveList=self.getFileList(self.config['data'])
        self.processArchive()


    # gets a list of files of a folder
    def getFileList(self, filepath):
        f = []
        for (dirpath, dirnames, filenames) in walk(filepath):
            f.extend(filenames)
            break
        return f.copy()

    #main driver of the app
    def processArchive(self):
        malwareItemDict={}
        cytherealObj=queryCytheral()

        for archiveItem in self.ArchiveList:
            if ".DS_Store" in archiveItem:
                print (".DS_Store skipping...")
                continue
            else:
                print("--=== ", archiveItem, " ===--")
                archiveItemWithFilePath=self.config['data']+"/"+archiveItem
                if "error" in archiveItemWithFilePath or "bistreams" in archiveItemWithFilePath  or \
                    "sql" in archiveItemWithFilePath  or "sipaccounts" in archiveItemWithFilePath:
                    print("Skipping File:", archiveItemWithFilePath)
                    continue
                else:
                    self.extractTarFile( archiveItemWithFilePath)
                    malwareFileList=self.getFileList(self.config['extractFolder'])
                    try:
                        for malwareFile in malwareFileList:
                                if ".DS_Store" not in malwareFile:
                                    malwareFileWithPath=self.config['extractFolder']+"/"+malwareFile
                                    malwareItemDict['malwareFile']=malwareFile
                                    malwareItemDict['malwareFileWithPath']=malwareFileWithPath
                                    malwareItemDict['sha1']=self.calculateHash(malwareFileWithPath,"sha1")
                                    malwareItemDict['sha256']=self.calculateHash(malwareFileWithPath,"sha256")
                                    malwareItemDict['md5']=self.calculateHash(malwareFileWithPath,"md5")
                                    malwareItemDict['malwareCreationDate']=self.getModifiedDate(malwareFileWithPath)
                                    malwareItemDict['timestamp']=self.getModifiedDate(malwareFileWithPath)
                                    malwareItemDict['timestamp']=self.convertEpochDateToDateTime(malwareItemDict['timestamp'])

                                    # Send to Modules Here:
                                    malwareItemDict=self.QueryVirusTotal(malwareItemDict)
                                    cythreal_Data=cytherealObj.QueryCythreal(malwareItemDict['sha1'])
                                    if cythreal_Data:
                                        # print (cythreal_Data.success, ":", malwareItemDict['malwareFile'])
                                        found=True
                                        malwareItemDict['cythreal']=cytherealObj.getCythrealReport(malwareItemDict['sha1'])

                                    else:
                                        print ("Submit to Cytheral Here:")
                                        cytherealObj.submitToCythreal(malwareItemDict['malwareFile'],malwareItemDict['malwareFileWithPath'],["lsp","ccu","unknown", "honeynet"])
                                        found=False
                                        print ("... sleeping for 2 min to allow cythreal to process data..")
                                        time.sleep(120)
                                        malwareItemDict['cythreal'] = cytherealObj.getCythrealReport(
                                            malwareItemDict['sha1'])
                                    self.malwareProcessList.append(malwareItemDict.copy())
                                    self.moveCompletedFile(malwareItemDict, found)
                                    malwareItemDict.clear()

                                else:
                                    continue
                    except:
                        print("Unexpected error:", malwareFile,":", sys.exc_info()[0])
                        raise

            # move completed archive file to completed folder
            sourceFile = archiveItemWithFilePath
            destinationFile = self.config['complete']+"/" + archiveItem
            os.rename(sourceFile, destinationFile)
        # todo Query Team Cymru here. Group all SHA256 values and send in one query
        # todo post all sha1, sha256, and md5 values to alienvault and cyrtg.io
        self.writeVT_Results(self.malwareProcessList)

    def removeFilesFromExtractFolder(self, fileWithPath):
        if os.path.exists(fileWithPath):
            print ("Removing:", fileWithPath)
            os.remove(fileWithPath)
        else:
            print("The file does not exist", fileWithPath)
            print("Unexpected error:",  ":", sys.exc_info()[0])

    # unarchives tar/tgz file without the folder structure. just extracts the files in one folder
    def extractTarFile(self,tar_file):
        try:
            output_dir = "."
            tar = tarfile.open(tar_file)
            for member in tar.getmembers():
                if member.isreg():  # skip if the TarInfo is not files
                    member.name = os.path.basename(member.name)  # remove the path by reset it
                    tar.extract(member, self.config["extractFolder"])  # extract
        except:
            print ("Error:", tar_file)
            print("Unexpected error:", tar_file, ":", sys.exc_info()[0])

    # calculates hash values
    def calculateHash(self, filename, hashType):
        BLOCKSIZE = 65536
        if hashType=="sha256":
            hasher = hashlib.sha256()
        elif hashType=="sha1":
            hasher = hashlib.sha1()
        elif hashType=="md5":
            hasher = hashlib.md5()
        else:
            print ("Error Unknown Hash Type, sha256, sha1, md5 accepted values")
            exit()
        with open(filename, 'rb') as afile:
            buf = afile.read(BLOCKSIZE)
            while len(buf) > 0:
                hasher.update(buf)
                buf = afile.read(BLOCKSIZE)
        return hasher.hexdigest()

    def QueryVirusTotal(self, malwareItemDict):
        VT_Response=self.submitVT_Hash(malwareItemDict['sha256'])
        VT_Response['fileinfo']=malwareItemDict.copy()
        if "data" in VT_Response.keys():
            print ("      --:", "Known Malware:", malwareItemDict['sha256'])
            # todo sort this out
            VT_Response['found']="true"
            malwareItemDict['VirusTotal']=VT_Response.copy()

            self.knownMalwareToProcess.append(malwareItemDict.copy())
            sourceFile=malwareItemDict['malwareFileWithPath']
            destinationFile=self.config['extractFolder']+"/"+"Known"+"/"+malwareItemDict['malwareFile']
            # os.rename(sourceFile, destinationFile)
            time.sleep(20)
            self.vt_results.append(VT_Response)
            return (malwareItemDict.copy())
        if "error" in VT_Response.keys():
            print ("      --:", "Unknown Malware Submitting for more analysis:", malwareItemDict['sha256'] )
            VT_ID=self.submitVT_File(malwareItemDict['malwareFileWithPath'])
            sourceFile = malwareItemDict['malwareFileWithPath']
            destinationFile = self.config['extractFolder']+"/" + "Unknown" + "/" + malwareItemDict['malwareFile']
            malwareItemDict['UnknownFilePath']=destinationFile
            #os.rename(sourceFile, destinationFile)
            self.unKnownMalwareToProcess.append(malwareItemDict.copy())
            print ("         -- Waiting 120 Seconds for Virus Total to do Analysis... Please Wait.. --")
            time.sleep(120)
            vt_results=self.getVT_Analysis(VT_ID)
            vt_results['found'] = "false"
            malwareItemDict['VirusTotal']=vt_results.copy()
            self.vt_results.append(vt_results)
            return (malwareItemDict)

    # submit to virus total
    def submitVT_Hash(self, hash_value):
        headers = {
            'x-apikey': self.config['vt_api_key'],
        }
        strAddressWithHash='https://www.virustotal.com/api/v3/files/' + hash_value
        response = requests.get(strAddressWithHash, headers=headers)
        return response.json()

    def submitVT_File(self,fileWithPath):
        API_KEY = self.config['vt_api_key']
        vt_files = virustotal3.core.Files(API_KEY)
        results = vt_files.upload(fileWithPath)
        return results

    def getVT_Analysis(self,id):
        API_KEY = self.config['vt_api_key']
        vt_Analysis = virustotal3.core.get_analysis(API_KEY,
                                                    "MzEyMTAzNzY2MjQ2NDRhMDE2MDVjNmE3YzFiMjgxN2U6MTYxOTg5NjE1MQ==")
        return(vt_Analysis)

    def writeVT_Results(self, listData):
        for item in listData:
            print ("Writing:", item['malwareFile'])
            self.writeJSONFile(item)

    def writeJSONFile(self, data):
        #try:
        fileWriter = open("jsonData3_vt.json", "a")

        strData = json.dumps(data) + "\n"
        print("    :", strData)
        fileWriter.write(strData)
        fileWriter.close()
        # except:
        #     print ("Error Writing:", data['malwareFile'])

    def getModifiedDate(self, file):
        fname = pathlib.Path(file)
        assert fname.exists(), f'No such file: {fname}'  # check that the file exists
        mtime = datetime.fromtimestamp(fname.stat().st_mtime)
        timestamp=mtime.timestamp()
        return timestamp

    def convertEpochDateToDateTime(self, epochDate):
        epochDate = datetime.fromtimestamp(
            epochDate)
        epochDate = epochDate.strftime('%Y-%m-%dT%H:%M:%S.%f%z')
        return epochDate

    def moveCompletedFile(self, malwareItemDict, Known):
        if Known==True:
            foundFolder="Known"
        else:
            foundFolder="Unknown"
        sourceFile = malwareItemDict['malwareFileWithPath']
        destinationFile = self.config['extractFolder'] + "/" + foundFolder + "/" + malwareItemDict['malwareFile']
        os.rename(sourceFile, destinationFile)