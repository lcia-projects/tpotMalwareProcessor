import json

import cythereal_magic
from cythereal_magic.rest import ApiException
from pprint import pprint
import hashlib
from os import walk, path

class queryCytheral:
    def __init__(self):
        print ("Cythreal Object Created")

    def QueryCythreal(self, item):
        # Configure API key authorization: api_key_query_param
        configuration = cythereal_magic.Configuration()
        configuration.api_key['key'] = '4e4ec10333dea2b521a5d90fb5b2000e'
        # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
        # configuration.api_key_prefix['key'] = 'Bearer'

        # create an instance of the API class
        api_instance = cythereal_magic.CytherealMagicApi(cythereal_magic.ApiClient(configuration))
        file_hash = item  # str | A cryptographic hash of a file. Supported hashes are SHA1.

        try:
            # Get additional details about certain filetypes
            api_response = api_instance.get_file_details(file_hash)
            return(api_response)
        except ApiException as e:
            # print("Exception when calling CytherealMagicApi->get_file_details: %s\n" % e)
            return None

    def getCythrealReport(self, item):
        # Configure API key authorization: api_key_query_param
        configuration = cythereal_magic.Configuration()
        configuration.api_key['key'] = '4e4ec10333dea2b521a5d90fb5b2000e'
        # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
        # configuration.api_key_prefix['key'] = 'Bearer'

        # create an instance of the API class
        api_instance = cythereal_magic.CytherealMagicApi(cythereal_magic.ApiClient(configuration))
        file_hash = item  # str | A cryptographic hash of a file. Supported hashes are SHA1.

        try:
            # Get the Magic report for a binary.
            api_response = api_instance.get_report(file_hash)
            return (self.processCythrealReport(api_response))

        except ApiException as e:
            test=0
            #print("Exception when calling CytherealMagicApi->get_report: %s\n" % e)

    def processCythrealReport(self,response):
        dataDict = {}
        dataDict['sha1'] = str(response.data.sha1)
        dataDict['sha256'] = str(response.data.sha256)
        dataDict['sha512'] = str(response.data.sha512)
        dataDict['md5'] = str(response.data.md5)
        dataDict['unix_file_type'] = str(response.data.unix_file_type)
        dataDict['object_class'] = str(response.data.object_class)
        dataDict['filename'] = str(response.data.filename)
        dataDict['first_seen'] = str(response.data.first_seen)
        dataDict['is_owned'] = str(response.data.is_owned)
        dataDict['is_public'] = str(response.data.is_public)
        dataDict['categories'] = str(response.data.categories)
        dataDict['labels'] = str(response.data.labels)
        dataDict['tags'] = str(response.data.tags)
        dataDict['tokens'] = str(response.data.tokens)
        dataDict['detection_stats'] = str(response.data.detection_stats)
        dataDict['av_names'] = str(response.data.av_names)
        dataDict['campaign_id'] = str(response.data.campaign_id)
        return dataDict.copy()

        print(dataDict)

    def submitToCythreal(self, filename, fileWithPath, Tags):
        # Configure API key authorization: api_key_query_param
        configuration = cythereal_magic.Configuration()
        configuration.api_key['key'] = '4e4ec10333dea2b521a5d90fb5b2000e'
        # Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
        # configuration.api_key_prefix['key'] = 'Bearer'

        # create an instance of the API class
        api_instance = cythereal_magic.CytherealMagicApi(cythereal_magic.ApiClient(configuration))
        filedata = fileWithPath  # file | Binary contents of the file
        # str | Name of the file being uploaded (optional)
        password = 'password_example'  # str | If uploading a password protected zip, this field MUST contain the password.  (optional)
        tags = Tags.copy()  # list[str] | A comma separated list of tags to create (Will not auto tag the file)  (optional)
        priority = 2  # int | Analysis priority. Higher priority files are analyzed first. Priorities higher than default may require additional privileges. (optional) (default to 2)

        try:
            # Upload a file for processing
            api_response = api_instance.create_file(filedata, filename=filename, password=password, tags=tags,
                                                    priority=priority)
            # response = json.loads(api_response)
            pprint(api_response)
            # pprint(response)

        except ApiException as e:
            test=0
            # print("Exception when calling CytherealMagicApi->create_file: %s\n" % e)